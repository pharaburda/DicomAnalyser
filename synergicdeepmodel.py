# -*- coding: utf-8 -*-
"""SynergicDeepModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e0E9Rrl_q4rMr7K5SuHBueH99Q46al4b
"""

import torch
import torchvision.models as models
from torch import nn, optim
import math
from torchvision import datasets
from torchvision.transforms import transforms
import os
from torchvision.utils import save_image
import torch.utils.data
import torch.nn.functional as F

device = 'cuda:0'

class SynergicNet(nn.Module):
    def __init__(self):
      super(SynergicNet, self).__init__()
      self.conv1 = nn.Conv1d(1, 32, 1)
      self.conv2 = nn.Conv1d(32, 64, 1)
      self.fc1 = nn.Linear(131072, 128)
      self.fc2 = nn.Linear(128, 2)

    def forward(self, x, y):
      x = torch.cat((x, y), 1).unsqueeze(1)
      #print(x.size())
      x = self.conv1(x)
      x = F.relu(x)

      x = self.conv2(x)
      x = F.relu(x)

      x = F.max_pool1d(x, 2)
      x = torch.flatten(x, 1)
      x = self.fc1(x)
      x = F.relu(x)
      x = self.fc2(x)

      #output = F.log_softmax(x, dim=1)
      output = F.softmax(x, dim=1)
      return output


def initialize_model(use_pretrained=True):
    torch.manual_seed(10)
    first_component = models.resnet50(pretrained=use_pretrained).to(device)
    second_component = models.resnet50(pretrained=use_pretrained).to(device)

    first_component.fc = nn.Identity()
    second_component.fc = nn.Identity()

    synergicNet = SynergicNet().to(device)
    return first_component, second_component, synergicNet

def train_model(component1, component2, synergicNet, dataloaders_1, dataloaders_2, optimizer, criterion, num_epochs=10):
    #since = time.time()

    #val_acc_history = []

    #best_model_wts_1 = copy.deepcopy(component1.state_dict())
    #best_model_wts_2 = copy.deepcopy(component2.state_dict())
    #best_acc = 0.0

    for epoch in range(num_epochs):
        print('Epoch {}/{}'.format(epoch, num_epochs - 1))
        print('-' * 10)

        for phase in ['train', 'val']:
            if phase == 'train':
                component1.train()
                component2.train()
            else:
                component1.eval()
                component2.eval()

            for inputs1, labels1 in dataloaders_1[phase]:
                inputs1 = inputs1.to(device)
                labels1 = labels1.to(device)

                outputs1 = component1(inputs1).to(device) 

                for inputs2, labels2 in dataloaders_2[phase]:
                    inputs2 = inputs2.to(device)
                    labels2 = labels2.to(device)

                    optimizer.zero_grad()

                    outputs2 = component2(inputs2)
                    #outputs1 = outputs1.to(device)
                    outputs2 = outputs2.to(device)
                    output = synergicNet(outputs1, outputs2)

                    with torch.set_grad_enabled(phase == 'train'):
                        label = 1 if labels1==labels2 else 0
                        label = torch.LongTensor([label]).to(device)
                        print(output)
                        print(label)
                        loss = criterion(output, label)
                        _, preds = torch.max(output, 1)

                        if phase == 'train':
                            loss.backward()
                            optimizer.step()

torch.autograd.set_detect_anomaly(True)

data_dir = '/content/drive/My Drive/magisterka_test'
input_size = (224, 224)
transform = transforms.Compose([
        transforms.Resize(input_size),
        transforms.ToTensor()
    ])

image_dataset = {x: datasets.ImageFolder(os.path.join(data_dir, x), transform) for x in ['train', 'val']}
dataset_len = {x: len(image_dataset[x]) for x in ['train', 'val']}
half_len = {x: int(len(image_dataset[x]) /2) for x in ['train', 'val']}

subset_1 = {}
subset_2 = {}
for x in ['train', 'val']:
  s_1, s_2 = torch.utils.data.random_split(image_dataset[x], [half_len[x], half_len[x]])
  subset_1[x] = s_1
  subset_2[x] = s_2

image_loader_1 = {x: torch.utils.data.DataLoader(subset_1[x], shuffle=True, num_workers=4) for x in ['train', 'val']}
image_loader_2 = {x: torch.utils.data.DataLoader(subset_2[x], shuffle=True, num_workers=4) for x in ['train', 'val']}


first_component, second_component, synergicNet = initialize_model()

params_to_update = []
for param in first_component.parameters():
  params_to_update.append(param)
for param in second_component.parameters():
  params_to_update.append(param)
for param in synergicNet.parameters():
  params_to_update.append(param)

optimizer = optim.SGD(params_to_update, lr=0.001, momentum=0.9)

criterion = nn.CrossEntropyLoss()

train_model(first_component, second_component, synergicNet, image_loader_1, image_loader_2, optimizer, criterion)

# for data1, target1 in image_loader_1:
#   out_1 = first_component(data1.to('cuda:0'))
#   for data2, target2 in image_loader_2:
#     out_2 = second_component(data2.to('cuda:0'))
#     synergic_net = SynergicNet().to('cuda:0')
#     out = synergic_net(out_1.to('cuda:0'), out_2.to('cuda:0'))
    #print(out)

subset_1[0]

out_1

out_2

target

import os
glaucoma_dir = '/content/drive/My Drive/magisterka/glaucoma/train'
glaucoma_len= len([name for name in os.listdir(glaucoma_dir) if os.path.isfile(os.path.join(glaucoma_dir, name))])
print(glaucoma_len) 

retinopathy_dir = '/content/drive/My Drive/magisterka/diabetic retinopathy/train'
retinopathy_len= len([name for name in os.listdir(retinopathy_dir) if os.path.isfile(os.path.join(retinopathy_dir, name))])
print(retinopathy_len) 

amd_dir = '/content/drive/My Drive/magisterka/amd/train'
amd_len= len([name for name in os.listdir(amd_dir) if os.path.isfile(os.path.join(amd_dir, name))])
print(amd_len)

import os
from getpass import getpass
import urllib

user = input('User name: ')
password = getpass('Password: ')
password = urllib.parse.quote(password) # your password is converted into url format
repo_name = input('Repo name: ')

cmd_string = 'git clone https://{0}:{1}@github.com/{0}/{2}.git'.format(user, password, repo_name)

os.system(cmd_string)
cmd_string, password = "", "" # removing the password from the variable

!git status

!git clone git@github.com:pharaburda/MasterThesis.git

!cd MasterThesis;ls;git status